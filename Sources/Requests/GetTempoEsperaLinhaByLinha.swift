//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /** Permite obter o tempo de espera para o próximo comboio de todas as estações de uma das linhas do Metro no momento é que é chamado. */
    public enum GetTempoEsperaLinhaByLinha {

        public static let service = APIService<Response>(id: "getTempoEsperaLinhaByLinha", tag: "", method: "GET", path: "/tempoEspera/Linha/{linha}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Identificação da linha que pretendem consultar. Possíveis valores: Amarela, Azul, Verde, Vermelha */
                public var linha: String

                public init(linha: String) {
                    self.linha = linha
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetTempoEsperaLinhaByLinha.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(linha: String) {
                let options = Options(linha: linha)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "linha" + "}", with: "\(self.options.linha)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void
            case status200

            public var success: Void? {
                switch self {
                case .status200: return ()
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
